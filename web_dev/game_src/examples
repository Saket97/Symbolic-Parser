
The following grammar is clearly not LL(1), how would you transform the grammar to make it LL(1)?
A -> A + B | A - B | B
B -> C * B | C / B | C
C -> ( A ) | int


Determine, by attempting to construct a parse table, whether the following grammar is LL(1). Make sure to show all the needed FIRST and FOLLOW sets you used to construct the parse table.
S -> A $
A -> - A B | id C
B -> - B | ""
C -> "" | . id


Define a recursive descent parser for the following grammar using recursive functions:
S -> A $
A -> - A B | id C
B -> - B | ""
C -> "" | . id 

Is the following context-free grammar ambiguous? Explain how you know.
S 	-> 	S a S
S 	-> 	b
S 	-> 	c


Is the following grammar LL(1)? Explain briefly. The start symbol is S.
S 	-> 	A B
A 	-> 	a
A 	-> 	A B
B 	-> 	b



T' -> T
T  -> R
T  -> aTc
R  -> eps
R  -> bR


1. S  ->  A  B  e   FIRST (ABe)  =  { d,  a,  c } 
2. A  ->  d  B      FIRST  (dB)  =  { d } 
3.     |  a  S      FIRST  (aS)  =  { a } 
4.     |  c         FIRST   (c)  =  { c } 
5. B  ->  A  S      FIRST  (AS)  =  { d,  a,  c } 
6.     |  b         FIRST   (b)  =  { b } 



Example 4 : Consider the following grammar  
0. S'  ->  E  # 
1. E   ->  T  E' 
2. E'  ->  +  T  E' 
3. 	      |  l
4. T   ->  F  T' 
5. T'  ->  *  F  T' 
6.        |  l
7. F   ->  (  E  ) 
8.       |  V 
Compute the FOLLOW sets of S’, E, E’, T,T’ and F 
Answer :  
FOLLOW (S’)  =  { } 
FOLLOW  (E)  =  { ), # } 
FOLLOW (E’)  =  { ), # } 
FOLLOW  (T)  =  { +, ), # } 
FOLLOW (T’)  =  { +, ), # } 
FOLLOW  (F)  =  { +, *, ), # } 



E  → TE'
E' → +TE'
E' → ε
T  → FT'
T' → *FT'
T' → ε
F  → (E)
F  → id
FIRST(E)  = {'(',id}       
FIRST(E') = {+,ε}
FIRST(T)  = {'(',id}
FIRST(T') = {*,ε}
FIRST(F)  = {'(',id}

FOLLOW(E)  = {$,)}
FOLLOW(E') = {$,)}
FOLLOW(T)  = {+,$,)}
FOLLOW(T') = {+,$,)}
FOLLOW(F)  = {*,+,$,)}


