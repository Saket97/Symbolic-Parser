/* Generated By:JavaCC: Do not edit this line. TigerParser.java */
public class TigerParser implements TigerParserConstants {
        public static void main(String args[])
        {
        TigerParser parser;
        if (args.length == 0)
        {
            System.out.println("Reading from standard input ...");
            parser = new TigerParser(System.in);
        }
        else if (args.length == 1)
        {
            System.out.println("Reading from file " + args[0] + " . . .");
            try
            {
                parser = new TigerParser(new java.io.FileInputStream(args[0]));
            }
            catch (java.io.FileNotFoundException e)
            {
                System.out.println("File " + args[0] + " not found.");
                return;
            }
        }
        else
        {
            System.out.println("Tiger Tokeniser: Usage is one of:");
            System.out.println("\u0009\u0009java TigerParser < inputfile");
            System.out.println("OR");
            System.out.println(" \u0009\u0009java TigerParser inputfile");
            return;
        }

        try
        {
                parser.Prog();
                System.out.println("TigerParser: Program successfully parsed.");
        }

        catch(ParseException e)

        {
                System.out.println(e.getMessage());
                System.out.println("TigerParser: Errors encountered during parse.");
        }


        /*
     	    Below: Put an english description for each token into tokenDesc[]
     		This is nicer than doing many 'if' statements for each token when printing them
    	*/
        String [] tokenDesc = new String[65];
        tokenDesc[ARRAY] = "ARRAY";
        tokenDesc[BREAK] = "BREAK";
        tokenDesc[DO] = "DO";
        tokenDesc[ELSE] = "ELSE";
        tokenDesc[END] = "END";
        tokenDesc[FOR] = "FOR";
        tokenDesc[FUNCTION] = "FUNCTION";
        tokenDesc[IF] = "IF";
        tokenDesc[IN] = "IN";
        tokenDesc[LET] = "LET";
        tokenDesc[NIL] = "NIL";
        tokenDesc[OF] = "OF";
        tokenDesc[THEN] = "THEN";
        tokenDesc[TO] = "TO";
        tokenDesc[TYPE] = "TYPE";
        tokenDesc[VAR] = "VAR";
        tokenDesc[WHILE] = "WHILE";
        tokenDesc[PLUS_SIGN] = "PLUS_SIGN";
        tokenDesc[MINUS_SIGN] = "MINUS_SIGN";
        tokenDesc[MULT_SIGN] = "MULT_SIGN";
        tokenDesc[DIV] = "DIV";
        tokenDesc[AND] = "AND";
        tokenDesc[OR] = "OR";
        tokenDesc[EQUALS] = "EQUALS";
        tokenDesc[NEQ] = "NEQ";
        tokenDesc[LT] = "LT";
        tokenDesc[LTE] = "LTE";
        tokenDesc[GT] = "GT";
        tokenDesc[GTE] = "GTE";
        tokenDesc[ASSIGN] = "ASSIGN";
        tokenDesc[SEMIC] = "SEMIC";
        tokenDesc[COMMA] = "COMMA";
        tokenDesc[COLON] = "COLON";
        tokenDesc[DOT] = "DOT";
        tokenDesc[LBR] = "LBR";
        tokenDesc[RBR] = "RBR";
        tokenDesc[LSQB] = "LSQB";
        tokenDesc[RSQB] = "RSQB";
        tokenDesc[LCURLB] = "LCURLB";
        tokenDesc[RCURLB] = "RCURLB";
        tokenDesc[IDENTIFIER] = "IDENTIFIER";
        tokenDesc[INTEGER] = "INTEGER";
        tokenDesc[STRING] = "STRING";
        tokenDesc[OTHER] = "OTHER";
        tokenDesc[SEMIC] = "SEMIC";

    }

/**************************
****** TIGER GRAMMAR ******
***************************/

// A Tiger program is just an expression
  static final public void Prog() throws ParseException {
    Exp();
    jj_consume_token(0);
  }

// An expression can be made up of OR'd expressions
  static final public void Exp() throws ParseException {
    ExpOR();
    ExpORPr();
  }

// These OR'd expressions can contain AND'd expressions
  static final public void ExpOR() throws ParseException {
    ExpAND();
    ExpANDPr();
  }

  static final public void ExpORPr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      jj_consume_token(OR);
      Exp();
      break;
    default:
      jj_la1[0] = jj_gen;

    }
  }

  static final public void ExpANDPr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      ExpOR();
      break;
    default:
      jj_la1[1] = jj_gen;

    }
  }

// These are made up of a sequence of arithmetic expressions
  static final public void ExpAND() throws ParseException {
    ArithExp();
    RelationExp();
  }

//An arithmetic expression is made up of a sequence of terms
  static final public void ArithExp() throws ParseException {
    Term();
    TermPr();
  }

// A relational expression is made up of a relational operator followed  by an arithmetic expression
  static final public void RelationExp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
    case NEQ:
    case LT:
    case LTE:
    case GT:
    case GTE:
      RelationOp();
      ArithExp();
      break;
    default:
      jj_la1[2] = jj_gen;

    }
  }

// Terms are made up of a sequence of factors
  static final public void Term() throws ParseException {
    Factor();
    FactorPr();
  }

  static final public void TermPr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_SIGN:
    case MINUS_SIGN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_SIGN:
        jj_consume_token(PLUS_SIGN);
        break;
      case MINUS_SIGN:
        jj_consume_token(MINUS_SIGN);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Term();
      TermPr();
      break;
    default:
      jj_la1[4] = jj_gen;

    }
  }

  static final public void FactorPr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT_SIGN:
    case DIV:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT_SIGN:
        jj_consume_token(MULT_SIGN);
        break;
      case DIV:
        jj_consume_token(DIV);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Factor();
      FactorPr();
      break;
    default:
      jj_la1[6] = jj_gen;

    }
  }

  static final public void Factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NIL:
      jj_consume_token(NIL);
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case LBR:
      jj_consume_token(LBR);
      ExpList();
      jj_consume_token(RBR);
      break;
    case MINUS_SIGN:
      UnaryOp();
      Exp();
      break;
    case IF:
      jj_consume_token(IF);
      Exp();
      jj_consume_token(THEN);
      Exp();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        Exp();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      break;
    case WHILE:
      jj_consume_token(WHILE);
      Exp();
      jj_consume_token(DO);
      Exp();
      break;
    case FOR:
      jj_consume_token(FOR);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGN);
      Exp();
      jj_consume_token(TO);
      Exp();
      jj_consume_token(DO);
      Exp();
      break;
    case BREAK:
      jj_consume_token(BREAK);
      break;
    case LET:
      jj_consume_token(LET);
      DecList();
      jj_consume_token(IN);
      ExpList();
      jj_consume_token(END);
      break;
    case IDENTIFIER:
      LValue();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void DecList() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case TYPE:
      case VAR:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_1;
      }
      Dec();
    }
  }

// A declaration of types, variables and functions
  static final public void Dec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
      TyDec();
      break;
    case VAR:
      VarDec();
      break;
    case FUNCTION:
      FunDec();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Type declarations
  static final public void TyDec() throws ParseException {
    jj_consume_token(TYPE);
    TypeId();
    jj_consume_token(EQUALS);
    Ty();
  }

// A Type
  static final public void Ty() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCURLB:
      jj_consume_token(LCURLB);
      FieldList();
      jj_consume_token(RCURLB);
      break;
    case ARRAY:
      jj_consume_token(ARRAY);
      jj_consume_token(OF);
      TypeId();
      break;
    case IDENTIFIER:
    case INTEGER:
    case STRING:
      TypeId();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void FieldList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      TypeId();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
        jj_consume_token(COLON);
        TypeId();
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  static final public void FieldExpList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      jj_consume_token(EQUALS);
      Exp();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
        jj_consume_token(EQUALS);
        Exp();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

// The ID of any type
  static final public void TypeId() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// A variable declarataions
  static final public void VarDec() throws ParseException {
    jj_consume_token(VAR);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      TypeId();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(ASSIGN);
    Exp();
  }

// A function declaration
  static final public void FunDec() throws ParseException {
    jj_consume_token(FUNCTION);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LBR);
    FieldList();
    jj_consume_token(RBR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      TypeId();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(EQUALS);
    Exp();
  }

/* The following there functions parse accessing assigning variables,  
 * i.e. id(ArgList)
 *		id {FieldExpList} 
 *		id[Exp] of Exp 
 *		id 
 *		LValue.id
 *		LValue[Exp].
 *
 */
  static final public void LValue() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBR:
    case LSQB:
    case LCURLB:
      FunctionRecordArray();
      break;
    default:
      jj_la1[19] = jj_gen;
      FunctionRecordArrayPr();
    }
  }

  static final public void FunctionRecordArray() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBR:
      jj_consume_token(LBR);
      ArgList();
      jj_consume_token(RBR);
      break;
    case LCURLB:
      jj_consume_token(LCURLB);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(EQUALS);
      Exp();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
        jj_consume_token(EQUALS);
        Exp();
      }
      jj_consume_token(RCURLB);
      break;
    case LSQB:
      jj_consume_token(LSQB);
      Exp();
      jj_consume_token(RSQB);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OF:
        jj_consume_token(OF);
        Exp();
        break;
      default:
        jj_la1[21] = jj_gen;
        FunctionRecordArrayPr();
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void FunctionRecordArrayPr() throws ParseException {
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case LSQB:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
        break;
      case LSQB:
        jj_consume_token(LSQB);
        Exp();
        jj_consume_token(RSQB);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      Exp();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
  }

// A list of expressions 
  static final public void ExpList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
    case FOR:
    case IF:
    case LET:
    case NIL:
    case WHILE:
    case MINUS_SIGN:
    case LBR:
    case IDENTIFIER:
    case INTEGER:
    case STRING:
      Exp();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMIC:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_6;
        }
        jj_consume_token(SEMIC);
        Exp();
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
  }

// A list or arguments
  static final public void ArgList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
    case FOR:
    case IF:
    case LET:
    case NIL:
    case WHILE:
    case MINUS_SIGN:
    case LBR:
    case IDENTIFIER:
    case INTEGER:
    case STRING:
      Exp();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        Exp();
      }
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
  }

//Unary operator
  static final public void UnaryOp() throws ParseException {
    jj_consume_token(MINUS_SIGN);
  }

//Relational operators
  static final public void RelationOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      break;
    case NEQ:
      jj_consume_token(NEQ);
      break;
    case GT:
      jj_consume_token(GT);
      break;
    case LT:
      jj_consume_token(LT);
      break;
    case GTE:
      jj_consume_token(GTE);
      break;
    case LTE:
      jj_consume_token(LTE);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public TigerParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x80000000,0x0,0x18000000,0x18000000,0x60000000,0x60000000,0x2000,0x141a8800,0x3010000,0x3010000,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x141a8800,0x0,0x141a8800,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1,0x0,0x7e,0x0,0x0,0x0,0x0,0x0,0x8c1000,0x0,0x0,0x8d0000,0x200,0x40000,0x200,0x40000,0x8c0000,0x400,0x400,0x15000,0x200,0x0,0x15000,0x4800,0x4800,0x80,0x100,0x8c1000,0x200,0x8c1000,0x7e,};
   }

  /** Constructor with InputStream. */
  public TigerParser(java.io.InputStream stream) {
     this(stream, null);
     System.out.println("Constructor1");
  }
  /** Constructor with InputStream and supplied encoding */
  public TigerParser(java.io.InputStream stream, String encoding) {
    System.out.println("Constructor2");
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TigerParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public TigerParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    System.out.println("Constructor3");
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new TigerParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public TigerParser(TigerParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    System.out.println("Constructor4");
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TigerParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    System.out.println(token);
    //if (token.image == "10")
    System.out.println("token "+ token.kind);
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
