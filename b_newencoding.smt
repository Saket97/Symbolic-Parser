(set-option :auto-config false)
(set-option :smt.mbqi false)
(set-option :smt.qi.profile true)
;(set-option :smt.qi.eager_threshold 100)
(set-option :produce-models true)
(set-option :smt.case_split 3)
;(set-option :auto-config false)
;(set-option :mbqi true)

(declare-fun ip (Int) Int)
(declare-fun loc (Int) Int)

(define-fun IsSymbol ((x Int)) Bool (or (and (>= x 0) (<= x 2)) (= x 5) (= x 6)(= x 202)))
(define-fun IsTerminal ((x Int)) Bool (or (and (>= x 1) (<= x 2)) (= x 202)))
(define-fun IsNonTerminal ((x Int)) Bool (and (>= x 5) (<= x 6)))
(define-fun IsEpsilon ((x Int)) Bool (= x 0))
(define-fun InRange ((x Int)) Bool (and (>= x 0) (<= x 10))) 
(define-fun InFuel ((x Int)) Bool (and (>= x 0) (<= x 2))) 

(declare-fun checkSymbol (Int) Bool) 
(declare-fun ParsingArray (Int) Int) 
;(declare-fun start (Int) Int) 
(declare-fun end (Int) Int) 
(declare-fun HardCode (Int Int Int Int Int Int) Bool)



(declare-fun debug1 (Int) Int)
;(declare-fun debug2 (Int) Int)
;(declare-fun debug3 (Int) Int)
;(declare-fun debug4 (Int) Int)
;(declare-fun debug5 (Int) Int)

(assert (forall ((i Int)) (!
				(= (checkSymbol i)  
				(implies (< i (end 0))
				(or 
						(and (IsTerminal (ParsingArray i)) (= (loc (ip i)) (ParsingArray i)) (= (+ (ip i) 1) (ip (+ i  1))))
						(and (IsNonTerminal (ParsingArray i)) (= (ip i) (ip (+ i 1))) (or 
																		(exists ((rn Int) (X1 Int) (X2 Int) (X3 Int) (X4 Int)) 
																							(and (<= i X1) (<= X1 X2) (<= X2 X3) (<= X3 X4) (<= X4 (end 0))
																							(HardCode rn i X1 X2 X3 X4)
																							(= (debug1 i) rn)
;																							(= (debug2 i) X1)
;																							(= (debug3 i) X2)
;																							(= (debug4 i) X3)
;																							(= (debug5 i) X4)
						))))))))))

(assert (forall ((rn Int) (X0 Int) (X1 Int) (X2 Int) (X3 Int) (X4 Int)) (! (= (HardCode rn X0 X1 X2 X3 X4)
																																	(and  (or false 
						(and (= rn 0) (= (ParsingArray X0) 6) (= (ParsingArray X2) 5) (= (ParsingArray X3) 202) (= X1 (+ X0 1)) (= X2 X1) (= X4 (+ X3 1) (end X3)) (= X3 (end X2)) (= (end X0) (end X3) X4)) 
						(and (= rn 1) (= (ParsingArray X0) 5) (= (ParsingArray X1) 1) (= (ParsingArray X2) 5) (= (ParsingArray X3) 2) (= X1 (+ X0 1)) (= X2 (+ X1 1)) (= X4 (+ X3 1)) (= (end X1) X2) (= (end X2) X3) (= (end X3) X4) (= (end X0) (end X3) X4))
						(and (= rn 2) (= (ParsingArray X0) 5) (= (ParsingArray X2) 5) (= (ParsingArray X3) 5) (= X1 (+ X0 1)) (= X1 X2) (= (end X2) X3) (= (end X3) X4) (= (end X0) X4)) 
						(and (= rn 3) (= (ParsingArray X0) 5) (= X1 (+ X0 1)) (= X1 X2 X3 X4 (end X0)))
						))))))

;(assert (and (HardCode 0 0 1 1 2 3) (= (end 0) 3) (= (end 1) 2) (= (end 2) 3))) 
;(assert (HardCode 1 0 1 2 3 4) (= (end 0) 4) (= (end 1) 2) (= (end 2) 3) (= (end 3) 4))
;(assert (HardCode 2 0 1 1 2 3) (= (end 0) 3) (= (end 1) 2) (= (end 2) 3))
;(assert (HardCode 3 0 1 1 1 1) (= (end 0) 1))

; S-> 1S2 | S S | ep
;(define-fun A2 ((X1 Int) (X2 Int)) Bool (or false
;												(> X1 X2)))
;
;(define-fun A1 ((X1 Int) (X2 Int)) Bool (or false
;												(and (<= X1 X2) (= (loc X1) 1) (A2 (+ X1 1) (- X2 1)) (= (loc X2) 2))
;												(exists ((X3 Int)) (and (<= X1 X2) (A2 X1 X3) (A2 (+ X3 1) X2) (>= X3 X1) (<= X3 X2)))
;												(> X1 X2)))
;
;(define-fun A ((X1 Int) (X2 Int)) Bool (or false
;												(and (<= X1 X2) (= (loc X1) 1) (A1 (+ X1 1) (- X2 1)) (= (loc X2) 2))
;												(exists ((X3 Int)) (and (<= X1 X2) (A1 X1 X3) (A1 (+ X3 1) X2) (>= X3 X1) (<= X3 X2)))
;												(> X1 X2)))

; LHS are only non-terminals
;(assert (and (IsNonTerminal a1) (IsSymbol a2) (IsSymbol a3) (IsSymbol a4)))
;(assert (and (IsNonTerminal b1) (IsSymbol b2) (IsSymbol b3) (IsSymbol b4)))
;(assert (and (IsNonTerminal c1) (IsSymbol c2) (IsSymbol c3) (IsSymbol c4)))

;(assert (and (= a1 5) (= a2 1) (= a3 5) (= a4 2)))
;(assert (and (= b1 5) (= b2 5) (= b3 5) (= b4 0)))
;(assert (and (= c1 5) (= c2 0) (= c3 0) (= c4 0)))
;(assert (not (A 1 4)))

;(assert (and (= (loc 1) 1) (= (loc 2) 2)))
;(assert (not (and (= (loc 1) 1) (= (loc 2) 2) (= (loc 3) 1) (= (loc 4) 1) (= (loc 5) 2) (= (loc 6) 2))))
;(assert (and (= (loc 1) 1) (= (loc 2) 2) (= (loc 3) 1) (= (loc 4) 1) (= (loc 5) 2) (= (loc 6) 2)))

(assert (= (ip 0) 0))
;(assert (= (ip (- 1)) -1))
(assert (= (ParsingArray 0) 6))
;(assert (= (ParsingArray 1) 5))
;(assert (= (ParsingArray 2) 1))
;(assert (= (ParsingArray 3) 5))
;(assert (= (ParsingArray 4) 2))
;(assert (= (ParsingArray 5) 1))
;(assert (= (ParsingArray 6) 202))
;(assert (= (ParsingArray 1) 5))
;(assert (= (ParsingArray 2) 5))
;(assert (= (ParsingArray 3) 5))
;(assert (= (ParsingArray 4) 1))
;(assert (= (ParsingArray 5) 202))
(assert (> (end 0) 40))
(assert (< (end 0) 50))
;(assert (= (ParsingArray 0) 5))

;(assert (IsTerminal (ParsingArray 2)))

;(assert (and (= (loc 0) 1) (= (loc 1) 1) (= (loc 2) 2)(= (loc 3) 2) (= (loc 4) 1) (= (loc 5) 1) (= (loc 6) 2) (= (loc 7) 2) (= (loc 8) 202)))


(assert (and 
(checkSymbol 0) 
(checkSymbol 1) 
(checkSymbol 2) 
(checkSymbol 3) 
(checkSymbol 4) 
(checkSymbol 5) 
(checkSymbol 6) 
(checkSymbol 7)
(checkSymbol 8)
(checkSymbol 9)
(checkSymbol 10) 
(checkSymbol 11) 
(checkSymbol 12) 
(checkSymbol 13) 
(checkSymbol 14) 
(checkSymbol 15) 
(checkSymbol 16) 
(checkSymbol 17)
(checkSymbol 18)
(checkSymbol 19)
(checkSymbol 20) 
(checkSymbol 21) 
(checkSymbol 22) 
(checkSymbol 23) 
(checkSymbol 24) 
(checkSymbol 25) 
(checkSymbol 26) 
(checkSymbol 27)
(checkSymbol 28)
(checkSymbol 29)
(checkSymbol 30) 
(checkSymbol 31) 
(checkSymbol 32) 
(checkSymbol 33) 
(checkSymbol 34) 
(checkSymbol 35) 
(checkSymbol 36) 
(checkSymbol 37)
(checkSymbol 38)
(checkSymbol 39)
(checkSymbol 40) 
(checkSymbol 41) 
(checkSymbol 42) 
(checkSymbol 43) 
(checkSymbol 44) 
(checkSymbol 45) 
(checkSymbol 46) 
(checkSymbol 47)
(checkSymbol 48)
(checkSymbol 49)
))

(push)
(check-sat)
;(get-info :all-statistics)
(get-model)
;(get-value (ParsingArray 0))
