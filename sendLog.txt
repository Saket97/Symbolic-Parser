correct string:  i + i
[['E', 'T', 'R'], ['R', '+', 'T', 'R'], ['R', '-', 'T', 'R'], ['R', 'eps'], ['T', 'i']]
input_string:  ['i', '+', 'i']
len(non_tokens): 3
('tokens', ['+', '-', 'i'])
############# mutation ################
 strpos:2
changed string:  i + +
[['E', 'eps', 'T', 'R'], ['R', '+', 'T', 'R'], ['R', '-', 'T', 'R'], ['R', 'eps', 'eps', 'eps'], ['T', 'eps', 'eps', 'i']]
len(non_tokens): 3
[['E', 'eps', 'T', 'R'], ['R', '+', 'T', 'R'], ['R', '-', 'T', 'R'], ['R', 'eps', 'eps', 'eps'], ['T', 'eps', 'eps', 'i']]
('tokens', ['+', '-', 'i'])
[['E', 'T', 'R'], ['R', '+', 'T', 'R'], ['R', '-', 'T', 'R'], ['R', 'eps'], ['T', 'i']]
type(ptable)= <type 'dict'>
len(non_tokens): 3
('tokens', ['+', '-', 'i'])
#rules: 5
Initialising SP...
Teemplate declaration starts in 17259 days, 20:38:38
new rule: 0
new rule: 1
new rule: 2
new rule: 3
new rule: 4
num_rules:  5
Teemplate declared in 17259 days, 20:38:39
Parse table in 17259 days, 20:38:39
SP initialized in 0:00:01
[['E', 'eps', 'T', 'R'], ['R', '+', 'T', 'R'], ['R', '-', 'T', 'R'], ['R', 'eps', 'eps', 'eps'], ['T', 'eps', 'eps', 'i']]
[['E', 'eps', 'T', 'R'], ['R', '+', 'T', 'R'], ['R', '-', 'T', 'R'], ['R', 'eps', 'eps', 'eps'], ['T', 'eps', 'eps', 'i']]
view_assign {'E': 'N1', 'i': 't3', '+': 't1', '-': 't2', 'eps': 'eps', 'R': 'N2', 'T': 'N3'}
len(parse_table): 3
PARSE TABLE: [{'i': 0, '+': 2, '-': 3, 'non_term': 'R', 'dol': 4}, {'i': 1, '+': 0, '-': 0, 'non_term': 'E', 'dol': 0}, {'i': 5, '+': 0, '-': 0, 'non_term': 'T', 'dol': 0}]
asserting grammar in 17259 days, 20:38:39
asserting grammar in 17259 days, 20:38:39
{'E': 'N1', '$': 'dol', 'dol': 'dol', 'i': 't3', '+': 't1', '-': 't2', 'eps': 'eps', 'R': 'N2', 'T': 'N3'}
asserting ptable in 17259 days, 20:38:39
adding parse table...
asserting ptable in 17259 days, 20:38:39
TEST COUNTERS:  [0, 2, 3, 1]
constraint:  succ(1, 0) == 1
constraint:  succ(1, 1) == 2
constraint:  succ(1, 2) == 3
constraint:  ip_str1(1, succ(1, 0)) == ip_str(1, 1)
constraint:  ip_str1(1, succ(1, 1)) == ip_str(1, 2)
constraint:  ip_str1(1, succ(1, 2)) == ip_str(1, 3)
asserting pred1 in 17259 days, 20:38:39
asserting pred2 in 17259 days, 20:38:39
asserting pred3 in 17259 days, 20:38:39
asserting parser start in 17259 days, 20:38:39
asserting parser end in 17259 days, 20:38:40
asserting parser start in 17259 days, 20:38:40
asserting parser end in 17259 days, 20:38:41
asserting parser start in 17259 days, 20:38:41
asserting parser end in 17259 days, 20:38:41
asserting parser start in 17259 days, 20:38:41
asserting parser end in 17259 days, 20:38:42
asserting parser start in 17259 days, 20:38:42
asserting parser end in 17259 days, 20:38:43
asserting parser start in 17259 days, 20:38:43
asserting parser end in 17259 days, 20:38:43
asserting parser start in 17259 days, 20:38:43
asserting parser end in 17259 days, 20:38:44
asserting parser start in 17259 days, 20:38:44
asserting parser end in 17259 days, 20:38:45
asserting parser start in 17259 days, 20:38:45
asserting parser end in 17259 days, 20:38:45
asserting parser start in 17259 days, 20:38:45
asserting parser end in 17259 days, 20:38:46
asserting parser start in 17259 days, 20:38:46
asserting parser end in 17259 days, 20:38:47
asserting parser start in 17259 days, 20:38:47
asserting parser end in 17259 days, 20:38:47
asserting parser start in 17259 days, 20:38:47
asserting parser end in 17259 days, 20:38:48
asserting parser start in 17259 days, 20:38:48
asserting parser end in 17259 days, 20:38:49
asserting parser start in 17259 days, 20:38:49
asserting parser end in 17259 days, 20:38:49
aux_const[0]:  aux_const1000
6 soft constraints added...
checking atmost 5 constraints can be relaxed
check_Sat:  sat
k  5
saket
checking atmost 4 constraints can be relaxed
check_Sat:  sat
k  4
saket
checking atmost 3 constraints can be relaxed
check_Sat:  sat
k  3
saket
checking atmost 2 constraints can be relaxed
check_Sat:  sat
k  2
saket
checking atmost 1 constraints can be relaxed
check_Sat:  sat
k  1
saket
checking atmost 0 constraints can be relaxed
check_Sat:  sat
k  0
saket
it was possible to satisfy all soft constraints
t1 3
t2 4
t3 5
ip_str1  [(1, 0) -> 5,
 (1, -1) -> 20,
 (1, 1) -> 3,
 (1, 2) -> 3,
 (1, 3) -> 7,
 (1, 4) -> 4,
 (1, 10000) -> 21,
 (1, 10001) -> 22,
 (1, 27) -> 3,
 (1, 29) -> 3,
 (1, 31) -> 4,
 (1, 33) -> 4,
 (1, 35) -> 4,
 (1, 37) -> 5,
 (1, 41) -> 5,
 (1, 43) -> 4,
 (1, 45) -> 5,
 (1, 47) -> 5,
 (1, 49) -> 3,
 else -> 4]
lookAheadIndex  [(1, 1) -> 0,
 (1, 2) -> 0,
 (1, 3) -> 0,
 (1, 4) -> 1,
 (1, 5) -> 27,
 (1, 6) -> 29,
 (1, 7) -> 31,
 (1, 8) -> 33,
 (1, 9) -> 35,
 (1, 10) -> 37,
 (1, 11) -> 41,
 (1, 12) -> 43,
 (1, 13) -> 45,
 (1, 14) -> 47,
 (1, 15) -> 49,
 else -> 0]
symbolAt  [(1, 1) -> 0,
 (1, 39) -> 1,
 (1, 2) -> 2,
 (1, 3) -> 5,
 (1, 4) -> 26,
 (1, 5) -> 28,
 (1, 6) -> 30,
 (1, 7) -> 32,
 (1, 8) -> 34,
 (1, 9) -> 36,
 (1, 10) -> 40,
 (1, 11) -> 42,
 (1, 12) -> 44,
 (1, 13) -> 46,
 (1, 14) -> 48,
 (1, 15) -> 50,
 else -> 0]
end  [(1, 1) -> -1, (1, 2) -> 38, (1, 3) -> 3, else -> -1]
startPosition  [(1, 1, 1) -> 1,
 (1, 2, 1) -> 2,
 (1, 3, 1) -> 39,
 (1, 1, 2) -> 2,
 (1, 2, 2) -> 2,
 (1, 3, 2) -> 3,
 else -> 2]
symbolInRHS  [(1, 1) -> 6,
 (1, 2) -> 2,
 (1, 3) -> 1,
 (2, 1) -> 3,
 (2, 2) -> 2,
 (2, 3) -> 1,
 (3, 1) -> 4,
 (3, 2) -> 2,
 (3, 3) -> 1,
 (4, 1) -> 6,
 (4, 2) -> 6,
 (4, 3) -> 6,
 (5, 1) -> 6,
 (5, 2) -> 6,
 (5, 3) -> 5,
 else -> 6]
step  [(1, 0) -> True,
 (1, 1) -> True,
 (1, 2) -> True,
 (1, 3) -> True,
 (1, 4) -> True,
 (1, 5) -> True,
 (1, 6) -> True,
 (1, 7) -> True,
 (1, 8) -> True,
 (1, 9) -> True,
 (1, 10) -> True,
 (1, 11) -> True,
 (1, 12) -> True,
 (1, 13) -> True,
 (1, 14) -> True,
 (1, 16) -> False,
 else -> True]
success  [(1, 1) -> False,
 (1, 2) -> False,
 (1, 3) -> False,
 (1, 15) -> True,
 (1, 16) -> True,
 else -> False]
N1	->	eps	N3	N2	
N2	->	+	N3	N2	
N2	->	-	N3	N2	
N2	->	eps	eps	eps	
N3	->	eps	eps	i	
accept_list  [['t3', 't1', 't1']]
corrected string saket: 
i  +  +  
Solving time taken: 0:00:11
correct string:  i + i
[['E', 'T', 'R'], ['R', '+', 'T', 'R'], ['R', '-', 'T', 'R'], ['R', 'eps'], ['T', 'i']]
input_string:  ['i', '+', 'i']
len(non_tokens): 3
('tokens', ['+', '-', 'i'])
############# mutation ################
 strpos:1
changed string:  i i +
[['E', 'eps', 'T', 'R'], ['R', '+', 'T', 'R'], ['R', '-', 'T', 'R'], ['R', 'eps', 'eps', 'eps'], ['T', 'eps', 'eps', 'i']]
############## parser called...###########
parser called with string:  ['i', '+', '+']
['R', 'T']
['R', 'i']
consuming token i
['R', 'T', '+']
consuming token +
parse error...
ontop: T but lookahead: +
